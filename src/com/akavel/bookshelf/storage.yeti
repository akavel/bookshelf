module com.akavel.bookshelf.storage;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase$CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import java.util.TimeZone;

load com.akavel.utils;

sqlDateFormat = (
	f = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	f#setTimeZone(TimeZone#getTimeZone("UTC"));
	f);

currentVersion = 2;

class BooksStorage(Context context) extends SQLiteOpenHelper(context, "bookshelf.db", (() unsafely_as ~SQLiteDatabase$CursorFactory), currentVersion)

	void onCreate(SQLiteDatabase db)
		this#onUpgrade(db, 0, currentVersion);
		(),
	
	targets oldv newv targetv =
		(oldv <= (targetv - 1)) and (targetv <= newv),
	
	void onUpgrade(SQLiteDatabase db, int oldv, int newv)
		_ = Log#d("Bookshelf", "entering DB onUpgrade \(oldv) => \(newv)");
		targets = targets oldv newv;
		if targets 1 then
			db#execSQL(
				"CREATE TABLE shelves (" ^
				"	_id INT PRIMARY KEY," ^ // column name used by Android helper classes
				"	title TEXT NOT NULL," ^
				"	author TEXT NOT NULL," ^
				"	path TEXT NOT NULL UNIQUE," ^
				"	lastOpened INT," ^
				"	shelf INT DEFAULT 0" ^
				");");
			()
		elif targets 2 then
			// Change the type of 'lastOpened' column to DATETIME, add column 'fileModified' as DATETIME
			try
				db#beginTransaction();
				db#execSQL(
				"CREATE TABLE new_shelves (" ^
				"	_id INT PRIMARY KEY," ^ // column name used by Android helper classes
				"	title TEXT NOT NULL," ^
				"	author TEXT NOT NULL," ^
				"	path TEXT NOT NULL UNIQUE," ^
				"	shelf INT DEFAULT 0," ^
				"	lastOpened DATETIME," ^
				"	fileModified DATETIME" ^
				");");
				db#execSQL(
				"INSERT INTO new_shelves(_id, title, author, path, shelf) " ^
				"	SELECT _id, title, author, path, shelf FROM shelves;");
				db#execSQL(
				"DROP TABLE shelves;");
				db#execSQL(
				"ALTER TABLE new_shelves RENAME TO shelves;");
				_ = Log#e("Bookshelf", "SQL onUpgrade trx seems successful");
				db#setTransactionSuccessful()
			finally
				db#endTransaction()
			yrt
		fi;
		_ = Log#d("Bookshelf", "finished DB onUpgrade \(oldv) => \(newv)"),
	
	Cursor openCursor(int shelf)
		s = string(shelf);
		//FIXME: as described in Android docs, don't use getReadableDatabase() in GUI thread
		//FIXME: handle multithreaded access to DB somehow
		//FIXME: close the cursor somehow, most probably
		db = this#getReadableDatabase();
		if shelf == 0 then
			db#rawQuery("SELECT title, author, path, _id FROM shelves WHERE shelf=0 ORDER BY lastOpened DESC, title", [])
		else
			db#rawQuery("SELECT title, author, path, _id FROM shelves WHERE shelf=? ORDER BY title", [s])
		fi,

	void merge(Book[] values)
		db = this#getWritableDatabase();
		try
			db#beginTransaction();
			for values do book:
				_ = Log#d("", "Adding \(book#path)");
				data = new ContentValues();
				data#put("author", book#author);
				data#put("title", book#title);
				data#put("path", book#path);
				if not nullptr? book#lastOpened then
					data#put("lastOpened", sqlDateFormat#format(book#lastOpened))
				fi;
				if not nullptr? book#fileModified then
					data#put("fileModified", sqlDateFormat#format(book#fileModified))
				fi;
				
				cur = db#rawQuery("SELECT * FROM shelves WHERE path = ?", [book#path]);
				n = cur#getCount();
				cur#close();
				_ = Log#d("", " found \(n)");
				
				if n > 0 then
					_ = db#update("shelves", data, "path = ?", [book#path])
				else
					_ = db#insertOrThrow("shelves", (), data)
				fi;
				()
			done;
			db#setTransactionSuccessful();
			_ = Log#d("", "committing transaction")
		finally
			db#endTransaction();
			db#close()
		yrt,

	boolean isVirgin()
		db = this#getReadableDatabase();
		cur = db#rawQuery("SELECT COUNT(*) FROM shelves WHERE lastOpened NOT NULL", []);
		_ = cur#moveToFirst();
		n = cur#getInt(0);
		cur#close();
		log.d "Bookshelf" "non-virgin records: \(n)";
		n == 0,

	Book bookByPath(String path)
		db = this#getReadableDatabase();
		cur = db#rawQuery(
			"SELECT " ^
			"	title, " ^
			"	author, " ^
			"	DATETIME(lastOpened) as lastOpened, " ^
			"	DATETIME(fileModified) as fileModified " ^
			"FROM shelves WHERE path=?",
			[path]);
		try
			if cur#getCount() == 0 then
				() as ~Book
			else
				_ = cur#moveToFirst();
				make name f = (
					idx = cur#getColumnIndex(name);
					s = cur#getString(idx);
					if not cur#isNull(idx) then
						f(s)
					fi);
				book = new Book(path);
				make "title" do s: book#title := s done;
				make "author" do s: book#author := s done;
				make "lastOpened" do s: book#lastOpened := sqlDateFormat#parse(s) done;
				make "fileModified" do s: book#fileModified := sqlDateFormat#parse(s) done;
				book
			fi
		finally
			cur#close()
		yrt,

	void markOpened(Book book)
		db = this#getWritableDatabase();
		book#lastOpened := new java.util.Date();
		dateString = sqlDateFormat#format(book#lastOpened);
		db#execSQL("UPDATE shelves SET lastOpened=? WHERE title=? AND author=? AND path=?",
			[dateString, book#title, book#author, book#path]),
		
	void moveBook(Book book, int shelf)
		o x = x unsafely_as ~Object;
		db = this#getWritableDatabase();
		db#execSQL("UPDATE shelves SET shelf=? WHERE title=? AND author=? AND path=?",
			[o shelf, o book#title, o book#author, o book#path]),
end;
