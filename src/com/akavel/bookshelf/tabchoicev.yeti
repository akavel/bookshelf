module com.akavel.bookshelf.tabchoicev;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint$Style;
import android.graphics.Path;
import android.support.v4.view.MotionEventCompat;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.View$MeasureSpec;

load com.akavel.utils;
load com.akavel.drawing;

picW = 80;
borderW = 20;
picH = 80;
strokeWidth = 3.0;

class TabChoiceView$OnTabChangedListener
	abstract void onTabChanged(int i)
end;

class TabChoiceView(Context context, AttributeSet attrs) extends View(context, attrs)
	var currentTab = 0,
	
	void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
		w =
			if View$MeasureSpec#getMode(widthMeasureSpec) == View$MeasureSpec#UNSPECIFIED then
				5*picW + 6*borderW
			else
				View$MeasureSpec#getSize(widthMeasureSpec)
			fi;
		h =
 			if View$MeasureSpec#getMode(heightMeasureSpec) `inList`  [
				View$MeasureSpec#UNSPECIFIED, View$MeasureSpec#AT_MOST
			] then
				picH
			else
				View$MeasureSpec#getSize(heightMeasureSpec)
			fi;
		this#setMeasuredDimension(w, h),
		
	var w = 0,
	var h = 0,
	
	var tabs = array [],
	var icons = array [],
	var wUnit = 0.0,
	
	prepareDrawing _ =
		star midx midy arm = (
			arms = 6; [0 .. arms-1]
				|> map (_ i = i*pi*2/arms)
				|> map (_ angle =
					[
						MoveTo {x=midx, y=midy},
						RLineTo {x=arm*(cos angle), y=arm*(sin angle)},
					])
				|> concat
			);
		circle midx midy arm =
			[ Circle {x=midx, y=midy, r=arm} ];
			//icon#addCircle(midx, midy, arm, Path$Direction#CCW)
		triangle midx midy arm = (
			h = 2*arm * (sqrt 3)/2;
			[
				MoveTo {x=midx, y=midy-arm},
				RLineTo {x=arm, y=h},
				RLineTo {x= -2*arm, y=0},
				Close (),
			]);
		square midx midy arm = (
			arm2 = arm*0.8;
			[ Rect {x1=midx-arm2, y1=midy-arm2, x2=midx+arm2, y2=midy+arm2} ]
			//icon#addRect(midx-arm2, midy-arm2, midx+arm2, midy+arm2, Path$Direction#CCW)
			);
		slash midx midy arm = (
			dx = arm*0.7;
			dy = arm*0.9;
			[
				MoveTo {x=midx-dx, y=midy+dy},
				LineTo {x=midx+dx, y=midy-dy},
			]);
			
		
		shapes = array [star, circle, triangle, square, slash];
		n = length shapes;

		wUnit = w / (n*picW + (n+1)*borderW);
		arm = (min h wUnit*picW)*0.7/2;
		midy = h/2;
		icons =
			shapes
			|> flip map2 (iterate (+1) 0) do i shape: 
				midx = wUnit*(borderW+picW/2) + i*wUnit*(borderW+picW);
				shape midx midy arm |> renderPath;
			done;
		
		tab = [
			MoveTo {x = 0, y = h-strokeWidth/2},
			LineTo {x = wUnit*borderW, y = strokeWidth/2},
			LineTo {x = wUnit*(borderW+picW), y = strokeWidth/2},
			LineTo {x = wUnit*(borderW+picW+borderW), y = h-strokeWidth/2},
		];
		
		tabs =
			[0 .. n-1]
			|> map do i:
				x = i*wUnit*(borderW+picW);
				renderPath [ Path {path=tab, x, y=0} ]
			done;
		{icons, tabs, wUnit},
	
	void onSizeChanged(int w_, int h_, int oldw, int oldh)
		w := w_;
		h := h_;
		prep = prepareDrawing ();
		icons := array prep.icons;
		tabs := array prep.tabs;
		wUnit := prep.wUnit,
	
	void onDraw(Canvas canvas)
		canvas#drawColor(Color#WHITE);
		
		stroke = new Paint();
		//stroke.setColor(Color.BLACK);
		stroke#setStrokeWidth(strokeWidth);
		stroke#setStyle(Paint$Style#STROKE);
		stroke#setAntiAlias(true);
		
		fill = new Paint();
		fill#setColor(Color#WHITE);
		fill#setStyle(Paint$Style#FILL);
		
		draw i = (
			canvas#drawPath(tabs[i], fill);
			canvas#drawPath(tabs[i], stroke);
			canvas#drawPath(icons[i], stroke)
			);
		
		// draw background tabs
		stroke#setColor(Color#GRAY);
		[0 .. length tabs - 1]
			|> filter (!= currentTab)
			|> reverse
			|> flip for draw;
		
		// draw foreground tab
		stroke#setColor(Color#BLACK);
		draw currentTab;
		
		// draw "page edge"
		bottom = h-strokeWidth/2;
		canvas#drawLine(0, bottom, currentTab*wUnit*(picW+borderW), bottom, stroke);
		canvas#drawLine((currentTab+1)*wUnit*(picW+borderW)+wUnit*borderW, bottom, w, bottom, stroke),
	
	listeners is array<~TabChoiceView$OnTabChangedListener> = array [],
	fireListeners i =
		for listeners do l:
			l#onTabChanged(i)
		done,
	
	void addOnTabChangedListener(TabChoiceView$OnTabChangedListener listener)
		push listeners listener,
	
	boolean onTouchEvent(MotionEvent event)
		//FIXME: "If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling performClick(). This will ensure consistent system behavior, including (...)"
		if not MotionEventCompat#getActionMasked(event) `inList`  [
			MotionEvent#ACTION_DOWN, MotionEvent#ACTION_MOVE, MotionEvent#ACTION_UP
		] then
			false
		else
			x = MotionEventCompat#getX(event, 0);
			checkFrom i = (
				right = (i+1)*wUnit*(picW+borderW);
				if x <= right then
					i
				else
					checkFrom (i + 1)
				fi
				);
			newtab = checkFrom 0;
			if newtab != currentTab and newtab < length tabs then
				currentTab := newtab;
				fireListeners newtab;
				this#invalidate() // FIXME: are we in UI thread?
			fi;
			true
		fi,
end;
