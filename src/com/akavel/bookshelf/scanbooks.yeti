module com.akavel.bookshelf.scanbooks;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.lang.Integer;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.jxpath.JXPathContext;
import org.jaxen.JaxenException;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.AsyncTask;
import android.os.Build$VERSION;
import android.os.Environment;
import android.text.TextUtils;
import android.util.Log;

//TODO: switch to use yeti.xml module?


{
	// Paths to all available SD-Cards in the system (include emulated)
	//
	// Warning: Hack! Based on Android source code of version 4.3 (API 18)
	// Because there is no standart way to get it.
	// TODO: Test on future Android versions 4.4+
	storageDirectories =
		// Final set of paths
		rv is hash<string, ()> = [:];
		// Primary physical SD-CARD (not emulated)
		rawExternalStorage = System#getenv("EXTERNAL_STORAGE");
		// All Secondary SD-CARDs (all exclude primary) separated by ":"
		rawSecondaryStoragesStr = System#getenv("SECONDARY_STORAGE");
		// Primary emulated SD-CARD
		rawEmulatedStorageTarget = System#getenv("EMULATED_STORAGE_TARGET");
		if TextUtils#isEmpty(rawEmulatedStorageTarget) then
			// Device has physical external storage; use plain paths.
			if TextUtils#isEmpty(rawExternalStorage) then
				// EXTERNAL_STORAGE undefined; falling back to default.
				rv["/storage/sdcard0"] := ()
			else
				rv[rawExternalStorage] := ()
			fi
		else
			// Device has emulated storage; external storage paths should have
			// userId burned into them.
			rawUserId =
				if Build$VERSION#SDK_INT < 17 then //Build.VERSION_CODES.JELLY_BEAN_MR1
					""
				else
					path = Environment#getExternalStorageDirectory()#getAbsolutePath();
					folders = Pattern#compile("/")#split(path); //FIXME: use yeti regexp lib
					//lastFolder = folders[folders.length - 1];
					lastFolder = fold (_ _ b = b) "" folders;
					var isDigit = false;
					try
						Integer#valueOf(lastFolder);
						isDigit := true //FIXME: don't do via exceptions
					catch NumberFormatException ignored:
						()  //FIXME: do we need to call anything here for NOP ?
					yrt;
					if isDigit then
						lastFolder
					else
						""
					fi
				fi;
			// /storage/emulated/0[1,2,...]
			if TextUtils#isEmpty(rawUserId) then
				rv[rawEmulatedStorageTarget] := ()
			else
				rv[rawEmulatedStorageTarget ^ File#separator ^ string(rawUserId)]
			fi
		fi;
		// Add all secondary storages
		if not TextUtils#isEmpty(rawSecondaryStoragesStr) then
			// All Secondary SD-CARDs splited into array
			//rawSecondaryStorages = rawSecondaryStoragesStr#split(File#pathSeparator);
			rawSecondaryStorages = strSplit File#pathSeparator rawSecondaryStoragesStr; //FIXME: escape the separator to form regexp?
			for rawSecondaryStorages do s:
				rv[s] := ()
			done
		fi;
		keys rv,

	scanBooksTask context onProgressListener =
		class ScanBooksTask extends AsyncTask
			extractMetadata path is string -> ~Book =
				_ = Log#d("ScanBooksTask", "extracting from zip: \(path)");
				zip = new ZipFile(path);
				var title = "";
				var author = "";
				try
					xmlFactory = DocumentBuilderFactory#newInstance();
					entries = zip#getEntries();
					var more = entries#hasMoreElements();
					more loop (
						entry = (entries#nextElement() unsafely_as ~ZipArchiveEntry);
						_ = Log#d("ScanBooksTask", "* zip entry: \(entry#getName())");
						filename = new File(entry#getName())#getName();
						if filename == "content.opf" then
							doc = xmlFactory#newDocumentBuilder()#parse(zip#getInputStream(entry));
							doc#normalize();
							
							ctx = JXPathContext#newContext(doc);
							ctx#registerNamespace("dc", "http://purl.org/dc/elements/1.1/");
							
							title := ctx#getValue("//dc:title")#toString();
							_ = Log#d("ScanBooksTask", "\(path) - title=\(title)");
							
							author := ctx#getValue("//dc:creator")#toString();
							_ = Log#d("ScanBooksTask", "\(path) - author=\(author)");
							more := false
						else
							more := entries#hasMoreElements()
						fi
					);
				finally
					zip#close()
				yrt;
				new Book(title, author, path),
			
			var progress = 0,
			
			void onProgressUpdate(Object[] values)
				db = new BooksStorage(context)#getWritableDatabase();
				try
					db#beginTransaction();
					for values do book_:
						book = (book_ unsafely_as ~Book);
						_ = Log#d("", "Adding \(book#path)");
						data = new ContentValues();
						data#put(BooksStorage#AUTHOR, book#author);
						data#put(BooksStorage#TITLE, book#title);
						data#put(BooksStorage#PATH, book#path);
						
						cur = db#rawQuery("SELECT * FROM \(BooksStorage#SHELVES) WHERE \(BooksStorage#PATH) = ?",
							[book#path]);
						n = cur#getCount();
						cur#close();
						_ = Log#d("", " found \(n)");
						
						if n > 0 then
							_ = db#update(BooksStorage#SHELVES, data, "\(BooksStorage#PATH) = ?", [book#path])
						else
							_ = db#insertOrThrow(BooksStorage#SHELVES, (), data)
						fi;
						()
					done;
					db#setTransactionSuccessful();
					_ = Log#d("", "committing transaction")
				finally
					db#endTransaction();
					db#close()
				yrt;
				
				len array = fold (_ x _ = x+1) 0 array;
				progress := progress + (len values);
				onProgressListener progress,
			
			scan context dir is 'a -> ~File -> () =
				//FIXME: use yeti's `listDirectory` from yeti.lang.io
				if dir#isDirectory() then
					_ = Log#i("ScanBooksTask", "Scanning dir: \(dir#getAbsolutePath())");
					class Filter extends FileFilter
						boolean accept(File child)
							if child#isDirectory() then
								true
							else
								_ = Log#i("ScanBooksTask", "file: \(child#getName())");
								child#getName() =~ "\\.epub$"  //FIXME: case insensitive
							fi
					end;
					children = dir#listFiles(new Filter());
					//TODO: check if children is not null?
					for children do child:
						if child#isDirectory() then
							scan context child
						else
							try
								book = extractMetadata child#getAbsolutePath();
								this#publishProgress([book])
							catch Exception e:
								e#printStackTrace();
								_ = Log#e("ScanBooksTask", child#getAbsolutePath(), e)
							yrt
						fi
					done
				fi,
			
			Object doInBackground(Object[] args)
				//TODO: detect if `storageDirectories` is empty, and maybe throw exception or something; maybe use "/" ?
				for storageDirectories do path:
					scan context new File(path);
				done;
				Log#d("ScanBooksTask", "scanning finished."),
		end;
		new ScanBooksTask(),
}
