module com.akavel.bookshelf.scanbooks;

import java.io.File;
import java.io.InputStream;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.jxpath.JXPathContext;

import android.os.AsyncTask;
import android.os.Build$VERSION;
import android.os.Environment;
import android.util.Log;

load com.akavel.bookshelf.storage;
load com.akavel.utils;

//TODO: switch to use yeti.xml module?

defaultForEmpty s default = if s == "" then default else s fi;

{
	// Paths to all available SD-Cards in the system (include emulated)
	//
	// Warning: Hack! Based on Android source code of version 4.3 (API 18)
	// Because there is no standart way to get it.
	// TODO: Test on future Android versions 4.4+
	storageDirectories =
		// Final set of paths
		rv is hash<string, ()> = [:];
		// All Secondary SD-CARDs (all exclude primary) separated by ":"
		rawSecondaryStoragesStr = System#getenv("SECONDARY_STORAGE");
		// Primary emulated SD-CARD
		rawEmulatedStorageTarget = System#getenv("EMULATED_STORAGE_TARGET");
		if rawEmulatedStorageTarget == "" then
			// Device has physical external storage; use plain paths.
			// Primary physical SD-CARD (not emulated)
			rv[System#getenv("EXTERNAL_STORAGE") `defaultForEmpty` "/storage/sdcard0"] := ()
		else
			// Device has emulated storage; external storage paths should have
			// userId burned into them.
			rawUserId =
				if Build$VERSION#SDK_INT < 17 then //Build.VERSION_CODES.JELLY_BEAN_MR1
					""
				else
					path = Environment#getExternalStorageDirectory()#getAbsolutePath();
					lastFolder = like "/([^/]+)/*$" path () |> tail |> head;  // extract subpattern match
					var isDigit = false;
					try
						Integer#valueOf(lastFolder);
						isDigit := true //FIXME: don't do via exceptions
					catch NumberFormatException ignored:
						()  //FIXME: do we need to call anything here for NOP ?
					yrt;
					if isDigit then
						lastFolder
					else
						""
					fi
				fi;
			// /storage/emulated/0[1,2,...]
			if rawUserId == "" then
				rv[rawEmulatedStorageTarget] := ()
			else
				rv[rawEmulatedStorageTarget ^ File#separator ^ string(rawUserId)]
			fi
		fi;
		// Add all secondary storages
		if not rawSecondaryStoragesStr == "" then
			// All Secondary SD-CARDs splited into array
			//rawSecondaryStorages = rawSecondaryStoragesStr#split(File#pathSeparator);
			rawSecondaryStorages = strSplit File#pathSeparator rawSecondaryStoragesStr; //FIXME: escape the separator to form regexp?
			for rawSecondaryStorages do s:
				if not (s == "") then
					rv[s] := ()
				fi
			done
		fi;
		keys rv,

	walkZip path walker is string -> (string -> (() -> ~InputStream) -> boolean) -> () =
		zip = new ZipFile(new File(path));
		try
			entries = zip#getEntries();
			var more = entries#hasMoreElements();
			more loop (
				entry = (entries#nextElement() unsafely_as ~ZipArchiveEntry);
				path = entry#getName();
				streamOpener _ = zip#getInputStream(entry);
				more := (walker path streamOpener) and entries#hasMoreElements()
			)
		finally
			zip#close()
		yrt,
		
	basename path is string -> string =
		new File(path)#getName(),
		
	scanBooksTask context onProgressListener =
		class ScanBooksTask extends AsyncTask
			extractMetadata path is string -> ~Book =
				_ = Log#d("ScanBooksTask", "extracting from zip: \(path)");
				var title = "";
				var author = "";
				walkZip path do path streamOpener:
					if basename path == "content.opf" then
						doc = DocumentBuilderFactory
							#newInstance()
							#newDocumentBuilder()
							#parse(streamOpener ());
						doc#normalize();
						
						ctx = JXPathContext#newContext(doc);
						ctx#registerNamespace("dc", "http://purl.org/dc/elements/1.1/");
						
						title := ctx#getValue("//dc:title")#toString();
						_ = Log#d("ScanBooksTask", "\(path) - title=\(title)");
						
						author := ctx#getValue("//dc:creator")#toString();
						_ = Log#d("ScanBooksTask", "\(path) - author=\(author)");
						
						false
					else
						true
					fi
				done;
				new Book(title, author, path),
			
			var progress = 0,
			
			void onProgressUpdate(Object[] values)
				new BooksStorage(context)
					#merge(map' (unsafely_as ~Book) values);
				
				len array = fold (_ x _ = x+1) 0 array;
				progress := progress + (len values);
				onProgressListener progress,
			
			scan path =
				walkFilesRecursive path do path:
					_ = Log#i("ScanBooksTask", "file: \(path)");
					if strEnds? path ".epub" then
						try
							book = extractMetadata path;
							if defined? book then
								this#publishProgress([book])
							fi
						catch Exception e:
							e#printStackTrace();
							_ = Log#e("ScanBooksTask", path, e)
						yrt
					fi
				done,
			
			Object doInBackground(Object[] args)
				//TODO: detect if `storageDirectories` is empty, and maybe throw exception or something; maybe use "/" ?
				for storageDirectories scan;
				Log#d("ScanBooksTask", "scanning finished."),
		end;
		new ScanBooksTask(),
}
