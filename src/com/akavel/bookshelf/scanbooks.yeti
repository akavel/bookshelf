module com.akavel.bookshelf.scanbooks;

import java.io.File;
import java.io.InputStream;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.jxpath.JXPathContext;

import android.os.AsyncTask;
import android.os.Build$VERSION;
import android.os.Environment;
import android.util.Log;

load yeti.lang.io;
load com.akavel.bookshelf.storage;
load com.akavel.utils;

//TODO: switch to use yeti.xml module?

defaultForEmpty s default = if s == "" then default else s fi;

// Paths to all available SD-Cards in the system (include emulated)
//
// Warning: Hack! Based on Android source code of version 4.3 (API 18)
// Because there is no standart way to get it.
// TODO: Test on future Android versions 4.4+
storageDirectories = (
	// Final set of paths
	rv is hash<string, ()> = [:];
	// All Secondary SD-CARDs (all exclude primary) separated by ":"
	rawSecondaryStoragesStr = System#getenv("SECONDARY_STORAGE");
	// Primary emulated SD-CARD
	rawEmulatedStorageTarget = System#getenv("EMULATED_STORAGE_TARGET");
	if rawEmulatedStorageTarget == "" then
		// Device has physical external storage; use plain paths.
		// Primary physical SD-CARD (not emulated)
		rv[System#getenv("EXTERNAL_STORAGE") `defaultForEmpty` "/storage/sdcard0"] := ()
	else
		// Device has emulated storage; external storage paths should have
		// userId burned into them.
		rawUserId =
			if Build$VERSION#SDK_INT < 17 then //Build.VERSION_CODES.JELLY_BEAN_MR1
				""
			else
				path = Environment#getExternalStorageDirectory()#getAbsolutePath();
				lastFolder = like "/([^/]+)/*$" path () |> tail |> head;  // extract subpattern match
				isDigit =
					try
						Integer#valueOf(lastFolder);
						true //FIXME: don't do via exceptions
					catch NumberFormatException:
						false
					yrt;
				if isDigit then
					lastFolder
				else
					""
				fi
			fi;
		// /storage/emulated/0[1,2,...]
		if rawUserId == "" then
			rv[rawEmulatedStorageTarget] := ()
		else
			rv[rawEmulatedStorageTarget ^ File#separator ^ string(rawUserId)]
		fi
	fi;
	// Add all secondary storages
	if not rawSecondaryStoragesStr == "" then
		// All Secondary SD-CARDs splited into array
		//rawSecondaryStorages = rawSecondaryStoragesStr#split(File#pathSeparator);
		rawSecondaryStorages = strSplit File#pathSeparator rawSecondaryStoragesStr; //FIXME: escape the separator to form regexp?
		for rawSecondaryStorages do s:
			if not (s == "") then
				rv[s] := ()
			fi
		done
	fi;
	keys rv
	);

typedef zipEntry = {
	path is string,
	streamOpen is () -> ~InputStream,
};

zipOpen path is string -> {
	close is () -> (),
	files is () -> list<zipEntry>,
} = (
	zip = new ZipFile(new File(path));
	entriesList entries is ~java.util.Enumeration -> list<zipEntry> =
		if entries#hasMoreElements() then
			entry = entries#nextElement() unsafely_as ~ZipArchiveEntry;
			{
				path = entry#getName(),
				streamOpen () = zip#getInputStream(entry),
			} :. \(entriesList entries)
		else
			[]
		fi;
	{
		close () = zip#close(),
		files () = entriesList zip#getEntries(),
	});

basename path is string -> string = new File(path)#getName();

parseXml inputStream is ~InputStream -> ~org.w3c.dom.Document = (
	doc = DocumentBuilderFactory
		#newInstance()
		#newDocumentBuilder()
		#parse(inputStream);
	doc#normalize();
	doc);

initXPath namespaces dom is hash<string, string> -> ~org.w3c.dom.Document -> {get is string -> string} = (
	ctx = JXPathContext#newContext(dom);
	forHash namespaces do k v:
		ctx#registerNamespace(k, v)
	done;
	{
		get = do xpath: ctx#getValue(xpath)#toString() done,
	});

extractMetadata path is string -> ~Book = (
	log.d "ScanBooksTask" "extracting from zip: \(path)";
	var title = "";
	var author = "";
	withHandle (zipOpen path) do zip:
		_ = zip.files ()
		|> filter do f: f.path |> basename |> (== "content.opf") done
		|> take 1
		|> map' do f:
			stream = f.streamOpen ();
			try
				xpath = stream
					|> parseXml
					|> initXPath ["dc": "http://purl.org/dc/elements/1.1/"];
				
				title := xpath.get "//dc:title";
				log.d "ScanBooksTask" "\(path) - title=\(title)";
				
				author := xpath.get "//dc:creator";
				log.d "ScanBooksTask" "\(path) - author=\(author)";
			finally
				stream#close()
			yrt
		done
	done;
	new Book(title, author, path)
	);

{
	scanBooksTask context onProgressListener =
		class ScanBooksTask extends AsyncTask
			var progress = 0,
			
			void onProgressUpdate(Object[] values)
				new BooksStorage(context)
					#merge(map' (unsafely_as ~Book) values);
				
				progress := progress + (len values);
				onProgressListener progress,
			
			Object doInBackground(Object[] args)
				//TODO: detect if `storageDirectories` is empty, and maybe throw exception or something; maybe use "/" ?
				_ = storageDirectories
					|> map iterateFilesRecursively
					|> concat
					|> map (do path: log.i "ScanBooksTask" "file: \(path)"; path done)
					|> filter (flip strEnds? ".epub")
					|> map' do path:
						try
							book = extractMetadata path;
							if defined? book then
								this#publishProgress([book])
							fi
						catch Exception e:
							e#printStackTrace();
							_ = Log#e("ScanBooksTask", path, e)
						yrt
					done;
				log.d "ScanBooksTask" "scanning finished.",
		end;
		new ScanBooksTask(),
}
