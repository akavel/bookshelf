module com.akavel.bookshelf.layout;

import android.content.Context;
import android.util.AttributeSet;
import android.view.View;
import android.view.View$MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup$LayoutParams;

load com.akavel.utils;

typedef measureSpec = AtMost number | Exactly number | Unspecified ();
demode measureSpec = case View$MeasureSpec#getMode(measureSpec) of
	View$MeasureSpec#AT_MOST: AtMost View$MeasureSpec#getSize(measureSpec);
	View$MeasureSpec#EXACTLY: Exactly View$MeasureSpec#getSize(measureSpec);
	_: Unspecified ()
	esac;
enmode measureSpec = case measureSpec of
	AtMost n: View$MeasureSpec#makeMeasureSpec(n, View$MeasureSpec#AT_MOST);
	Exactly n: View$MeasureSpec#makeMeasureSpec(n, View$MeasureSpec#EXACTLY);
	Unspecified (): View$MeasureSpec#makeMeasureSpec(0, View$MeasureSpec#UNSPECIFIED)
	esac;
	
visible v is ~View -> boolean = v#getVisibility() != ViewGroup#GONE;

typedef shyness = Greedy () | Fixed () | Shy ();

class MainLayout$LayoutParams(yeti.lang.Tag t) extends ViewGroup$LayoutParams(ViewGroup$LayoutParams#FILL_PARENT, 0)
	yeti.lang.Tag getTag() t;
end;

mainLayoutParams shy is shyness -> ~ViewGroup$LayoutParams =
	new MainLayout$LayoutParams(shy as ~yeti.lang.Tag);
shynessFromLayoutParams p is ~ViewGroup$LayoutParams -> shyness =
	(p unsafely_as ~MainLayout$LayoutParams)#getTag() unsafely_as shyness;
shynessOf v is ~View -> shyness =
	shynessFromLayoutParams v#getLayoutParams();

children g is ~ViewGroup -> list<~View> = (
	next i = if i >= g#getChildCount() then []
		else g#getChildAt(i) :. \(next (i + 1)) fi;
	next 0);
getMeasure v is ~View -> {w is number, h is number} = (
	result = { w = v#getMeasuredWidth(), h = v#getMeasuredHeight() };
	//log.d "MainLayout" "... getMeasure(\(v#getClass())) = \(result)";
	result);
measure w h v is measureSpec -> measureSpec -> ~View -> {w is number, h is number} = (
	//log.d "MainLayout" "... measure(\(w),\(h))";
	v#measure(enmode w, enmode h);
	getMeasure v);

// utils:
// resolveSizeAndState(): given desired size, and external initial query, and "too small" flags from children, raises "too small" flag in result if necessary
// protected getSuggestedMinimumHeight()/Width() -- ??
// getVirtualChildCount(), getVirtualChildAt(i)
// child.getLayoutParams()
// child.getVisibility() == GONE
// child.measure(...)
// child.getMeasuredWidth()/Height()
// childState = combineMeasuredStates(childState, child.getMeasuredState())
// setMeasuredDimension(resolveSizeAndState(...), ...)
// measureChildWithMargins(...) - given original ViewGroups measureSpecs, and internal "used space" inside ViewGroup, let child measure itself
// child.layout(...)

/*
Notes:
- if we're queried with Unspecified, we'd like to return "max h" and get it from our children;
	- but for now, given that it's simpler, we'll return what we have from children.
- if we're queried with Exactly/AtMost, we'd like to get both min & max h from our children, then try to fit in queried h;

In first pass, we must measure minimal H & available excess (the latter only if h AtMost/Exact).
We are also obliged to call .measure on all children.

In second pass, we need to re-measure all Greedy children to their final heights.

As to width, we can probably pass the measurespec transparently; then return either max of children (if Unspecified), or min(max of children, queried w) in remaining cases.
*/
measure1d children measureSpec doMeasure getMeasure
	is list<~View> -> measureSpec -> (measureSpec -> ~View -> ()) -> (~View -> number) -> number = (
	// First pass: sum children's minimal sizes, so that we could calculate excess.
	var minSize = 0;
	var nGreedy = 0;
	var nShy = 0;
	for children do child:
		//log.d "MainLayout" " child";
		doMeasure (Unspecified ()) child;
		size = getMeasure child;
		minSize := minSize + size;
		
		shynessOf child |> \case of
		Greedy (): nGreedy := nGreedy + 1;
		Shy (): nShy := nShy + 1;
		_: ()
		esac
	done;
	
	limitSize = case measureSpec of
		AtMost n: Some n;
		Exactly n: Some n;
		Unspecified: None ()
	esac;
	
	//FIXME: handle case where limitSize < minSize
	
	case limitSize of
	None ():
		minSize;
	Some size:
		countdown n =
			iterate (_ x = x-1) n;
		distribute nchildren shy how pixels =
			children
			|> filter ((shy ==) . shynessOf)
			|> map2 (_ n child = {n, child}) (countdown nchildren)
			|> flip fold pixels do pixels {n, child}:
				size0 = getMeasure child;
				slot = size0 + pixels / n |> max 0 |> how;
				doMeasure slot child;
				delta = (getMeasure child) - size0;
				pixels - delta
			done;
		excess = size - minSize;
		//log.d "MainLayout" "excess = \(excess), #greedy = \(nGreedy), #shy = \(nShy)";
		if excess >= 0 then
			leftovers =
				excess
				|> distribute nGreedy (Greedy ()) (AtMost)
				|> distribute nShy (Shy ()) (Exactly);
			size - leftovers
		else
			// take from shy first, then from greedy
			leftovers =
				excess
				|> distribute nShy (Shy ()) (AtMost)
				|> distribute nGreedy (Greedy ()) (Exactly);
			size - leftovers |> min size
		fi
	esac;
	);

class MainLayout(Context context, AttributeSet attrs) extends ViewGroup(context, attrs)
	var orientation = Vertical (),
	void setVertical()
		orientation := Vertical (),
	void setHorizontal()
		orientation := Horizontal (),

	// Ask all children to measure themselves and compute the measurement of this
	// layout based on the children.
	void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
		//log.d "MainLayout" "onMeasure, #children=\(this#getChildCount()) w=\(demode widthMeasureSpec) h=\(demode heightMeasureSpec) orientation=\(orientation)";
		//TODO: take into account our own getLayoutParams()
		
		case orientation of
		Vertical ():
			var maxW = 0;
			doMeasure heightSpec v is measureSpec -> ~View -> () = (
				//log.d "MainLayout \(this)" "... measure(\(demode widthMeasureSpec),\(heightSpec))";
				v#measure(widthMeasureSpec, enmode heightSpec));
			getMeasure v is ~View -> number = (
				w = v#getMeasuredWidth();
				h = v#getMeasuredHeight();
				//log.d "MainLayout \(this)" "... getMeasure(\(v#getClass())) = \(w),\(h)";
				maxW := max maxW w;
				h);
			h = measure1d
				(children this |> filter visible)
				(demode heightMeasureSpec)
				doMeasure
				getMeasure;
			this#setMeasuredDimension(
				View#resolveSize(maxW, widthMeasureSpec),
				h);
		_: // Horizontal ()
			var maxH = 0;
			doMeasure widthSpec v is measureSpec -> ~View -> () = (
				//log.d "MainLayout \(this)" "... measure(\(widthSpec),\(demode heightMeasureSpec))";
				v#measure(enmode widthSpec, heightMeasureSpec));
			getMeasure v is ~View -> number = (
				w = v#getMeasuredWidth();
				h = v#getMeasuredHeight();
				//log.d "MainLayout \(this)" "... getMeasure(\(v#getClass())) = \(w),\(h)";
				maxH := max maxH h;
				w);
			w = measure1d
				(children this |> filter visible)
				(demode widthMeasureSpec)
				doMeasure
				getMeasure;
			this#setMeasuredDimension(
				w,
				View#resolveSize(maxH, heightMeasureSpec))
		esac;
		(),
		
	// Position all children within this layout.
	void onLayout(boolean changed, int left, int top, int right, int bottom)
		//log.d "MainLayout" "onLayout(left=\(left), top=\(top), right=\(right), bottom=\(bottom))";
		case orientation of
		Vertical ():
			_ = children this
				|> filter visible
				|> flip fold 0 do top child:
					h = child |> getMeasure |> (.h);
					bottom = top + h + 1;  // exclusive, I believe
					//log.d "MainLayout \(this)" "V \(left) \(top) \(right) \(bottom) \(child)";
					child#layout(0, top, right-left+1, bottom);
					bottom
				done;
		_: // Horizontal ()
			_ = children this
				|> filter visible
				|> flip fold 0 do left child:
					w = child |> getMeasure |> (.w);
					right = left + w + 1;  // exclusive, I believe
					//log.d "MainLayout \(this)" "H \(left) \(top) \(right) \(bottom) \(child)";
					child#layout(left, 0, right, bottom-top+1);
					right
				done
		esac;
		(),
end;

{ mainLayoutParams }
